(define MAX-FUNCS 5)
(define MAX-ARITY 3)
;;move these higher-order functions back into scheme lazy library if possible
(define (lazy-repeat reps thunk)
           (if (= reps 0)
               '()
               (lazy-pair (thunk) (lazy-repeat (- reps 1) thunk))))

(define (lazy-pair a b) (lambda (tag) (if (eq? tag 'first) a (if (eq? tag 'rest) b 'lazy-pair))))

(define (lazy-map proc lazy-lst)
  (if (not (lazy-pair? lazy-lst))
      lazy-lst
      (lazy-pair (proc (lazy-lst 'first)) (lazy-map proc (lazy-lst 'rest)))))


;;grammar for generating programs that consist of a list of definitions and a body that may use those definitions



(define (gen-program)
  (let* ([num-of-funcs (random-integer MAX-FUNCS)]
         [function-signatures (gen-func-signatures num-of-funcs)]
         [functions (lazy-map (lambda (function-signature) (gen-function function-signature function-signatures)) function-signatures)]
         [body (gen-expr '() function-signatures)])
    (combine-program-parts functions body)))
(define (combine-program-parts functions body)
  (lazy-append (lazy-append (lazy-list 'let '()) functions) (lazy-list body)))

;;function signature related functions
(define (get-name sig) (sig 'first))
(define (get-vars sig) (sig 'rest))
(define (get-arity signature)
  (lazy-length (get-vars signature)))

(define (gen-func-signatures num-of-funcs)
  (lazy-repeat num-of-funcs gen-func-signature))


(define (gen-func-signature)
  (let* ([name (sym 'F)]
         [arity (random-integer MAX-ARITY)]
         [vars (gen-vars arity)])
    (combine-sig-parts name vars)))
(define combine-sig-parts lazy-pair)

(define (gen-vars arity)
;;  (lazy-repeat arity (lambda () (sym 'V))))
  (lazy-repeat arity (lambda () 'a)))


;;creates a function based on function-signature and may use functions specified by function-signatures in the body
(define (gen-function function-signature function-signatures)
  (let* ([function-signatures (lazy-remove function-signature function-signatures)] ;;ensures no recursive functions
         [vars (get-vars function-signature)]
         [body (gen-expr vars function-signatures)])
    (combine-function-parts function-signature body)))
(define (combine-function-parts function-signature body)
  (lazy-list 'define function-signature body))

(define (gen-expr vars function-signatures)
  (cond [(and (null? vars) (null? function-signatures))
         (sample (multinomial (list (lambda () (gen-if vars function-signatures)) gen-bool) (list 1/4 3/4)))]
        [(null? vars)
         (sample (multinomial (list (lambda () (gen-if vars function-signatures)) gen-bool (lambda () (gen-application vars function-signatures))) (list 1/8 3/4 1/8)))]
        [(null? function-signatures)
         (sample (multinomial (list (lambda () (gen-if vars function-signatures)) gen-bool (lambda () (gen-vars vars))) (list 1/8 3/4 1/8)))]         
        [else
         (sample (multinomial (list (lambda () (gen-if vars function-signatures)) gen-bool (lambda () (gen-application vars function-signatures)) (lambda () (gen-var vars))) (list 1/12 3/4 1/12 1/12)))]))

(define (gen-bool)
  (uniform-draw '(t f)))

(define (gen-if vars function-signatures)
  (combine-if-parts 'if (gen-expr vars function-signatures) (gen-expr vars function-signatures) (gen-expr vars function-signatures)))

(define combine-if-parts lazy-list)

(define (gen-application vars function-signatures)
  (let* ([function-signature (uniform-draw function-signatures)]
         [function (get-name function-signature)]
         [arity (get-arity function-signature)]
         [args (gen-args arity vars function-signatures)])
    (combine-application-parts function args)))
(define combine-application-parts lazy-pair)

(define (gen-args arity vars function-signatures)
  (lazy-repeat arity (lambda () (gen-expr vars function-signatures))))


(define gen-var uniform-draw)


(pretty-print (gen-bool))
;;(pretty-print (gen-func-signatures 4))
;;(pretty-print (gen-vars 3))
(define (thunk) 'a)

(define lr (lazy-repeat 5 gen-bool))
(lazy-list->all-list lr)
;; (define (plus1 x) (+ x 1))
;; (define m (lazy-map plus1 (lazy-list 1 2 3 4 5)))
;; (pretty-print (lazy-equal? m (lazy-list 'a 'a 'a 'a) 10))
;; (pretty-print (lazy-equal? m (lazy-list 2 3 4 5 6) 10))

;;(pretty-print (repeat 50 (lambda () (gen-expr '(V5 V6) '((F1 V1))))))

;;(pretty-print (repeat 20 (lambda () (lazy-list->list (gen-program) 20))))




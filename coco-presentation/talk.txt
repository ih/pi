=====TO DO=====
-[1] look at Josh's thesis for anything about induction for use in section 1
-[2] examples of formalizing intuition (closeness topology, rates of change calculus, chance probability)
-[3] examples of limitations see Percy's paper, Kemp et al, grammar induction book
-[4] chaos butterfly? http://www.gocomics.com/tomthedancingbug/
- maybe remove first point of defining structure...a bit off tangent
-[5] examples of importance of reuse in fragment grammar paper
====

MAIN IDEAS
-Model cognition as programming
-Structured generative concepts
-Modeling abstraction with lambda abstraction
-Learning grammars(?)

Cognition as programming
-quotes from Saussure and SICP
-Induction is a central aspect of cognition [1]
-An example 
{2,4,6,8}
{3,1,6,7}
-Algorithm design

DEFINING STRUCTURE
-The right definition can lead to powerful results (butterfly effect.. [4]) 
     -Formal methods [2]
-Limitations of feature vector representations [3]
-Relations represented as computations
-Number game revisited
  -a possible definition of structure
  -distributions represented as computations with uncertainty

INITIAL STEPS
-Tree domain 
-Humans learning can be modeled with structured generative coconcepts
-Program induction as a computational model of concept learning

PROGRAM INDUCTION 
-Naive Approach 
-Difficulties
-(Re)Using structure [5] 
  -different generative model results

FUTURE DIRECTIONS AND BARRIERS
-Learning grammars as a more general approach
-Grammars in terms of common computations
-Recursion and branching patterns  





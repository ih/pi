;; to do
;; -write a function to convert a set of trees into a generative model for the set using the most literal translation via nodify
;; -compress the literal translation of the data
;; -generate data from the compressed version 
;; -compare the data generated from the uncompressed and compressed versions of the program to new data generated by the original concept

(import (_srfi :1)
        (church readable-scheme))
;;prototype

(define growth-noise .05)
(define label-noise .50)
(define sample-size 20)
(define labels '(a b c d e f g))
(define (node x . subtrees)
  (if (flip (- 1 growth-noise))
      (delete '() (pair (noisy-label x) subtrees))
      '()))

(define (noisy-label x)
  (if (flip (- 1 label-noise))
      x
      (uniform-draw labels)))
  


(node 'a (node 'b) (node 'c (node 'd)))
(define (prototype) (node 'a (node 'b (node 'c (node 'd) (node 'd)))))
(define data (repeat sample-size prototype))
(pretty-print data)



(define (nodify tree)
  (if (null? tree)
      '()
      (append (list 'node (list 'quote (first tree)))
              (map nodify (rest tree)))))


;; -draw data
;; -implement ONE other classe for now
;; -write a generative concept for two classes from andreas' paper and generate data(trees) for each concept class
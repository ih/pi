;; to do
;; -write a function to convert a set of trees into a generative model for the set using the most literal translation via nodify
;; -compress the literal translation of the data
;; -generate data from the compressed version 
;; -compare the data generated from the uncompressed and compressed versions of the program to new data generated by the original concept

(import (_srfi :1)
        (church readable-scheme)
        (church external py-pickle))

(define draw-trees
  (py-pickle-script "./treedraw.py"))

;;prototype

(define growth-noise .05)
(define label-noise .05)
(define sample-size 20)
(define labels '(a b c d e))
(define (node x . subtrees)
  (if (flip (- 1 growth-noise))
      (delete '() (pair (noisy-label x) subtrees))
      '()))

(define (noisy-label x)
  (if (flip (- 1 label-noise))
      x
      (uniform-draw labels)))
  


(node 'a (node 'b) (node 'c (node 'd)))
(define (prototype) (node 'a (node 'b (node 'c (node 'd) (node 'd)))))

(define (parameterized-parts)
  (define (part x)
    (node 'a x (node 'a x (node 'a x (node 'a x x) x) x) x))
  (part (if (flip .5)
            (node 'b)
            (node 'c))))

   
(define (multiple-recursion)
  (define (part)
    (node 'a
          (if (flip .3)
              (part)
              (node 'a))
          (if (flip .04)
              (part)
              (node 'b))))
  (node 'c (node 'b (node 'd (part))) (part)))


(define proto-data (delete '() (repeat sample-size prototype)))

(define param-data (delete '() (repeat sample-size parameterized-parts)))

(define mrecur-data (delete '() (repeat sample-size multiple-recursion)))


(draw-trees (pair "./mrecur-data.png" mrecur-data))

(define (nodify tree)
  (if (null? tree)
      '()
      (append (list 'node (list 'quote (first tree)))
              (map nodify (rest tree)))))



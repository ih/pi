@techreport{Marthi:EECS-2007-89,
    Author = {Bhaskara Marthi and Stuart J. Russell and Jason Wolfe},
    Title = {Angelic Semantics for High-Level Actions},
    Institution = {EECS Department, University of California, Berkeley},
    Year = {2007},
    Month = {Jul},
    URL = {http://www.eecs.berkeley.edu/Pubs/TechRpts/2007/EECS-2007-89.html},
    Number = {UCB/EECS-2007-89}
}

@article{Goodman2008Rational,
    abstract = {This article proposes a new model of human concept learning that provides a rational analysis of learning feature-based concepts. This model is built upon Bayesian inference for a grammatically structured hypothesis space預 concept language of logical rules. This article compares the model predictions to human generalization judgments in several well-known category learning experiments, and finds good agreement for both average and individual participant generalizations. This article further investigates judgments for a broad set of 7-feature concepts預 more natural setting in several ways預nd again finds that the model explains human performance.},
    author = {Goodman, Noah D. and Tenenbaum, Joshua B. and Feldman, Jacob and Griffiths, Thomas L.},
    citeulike-article-id = {6527426},
    citeulike-linkout-0 = {http://dx.doi.org/10.1080/03640210701802071},
    doi = {10.1080/03640210701802071},
    journal = {Cognitive Science: A Multidisciplinary Journal},
    keywords = {bayesian, concept, learning},
    number = {1},
    pages = {108--154},
    posted-at = {2010-01-12 03:58:25},
    priority = {0},
    publisher = {Psychology Press},
    title = {A Rational Analysis of Rule-Based Concept Learning},
    url = {http://dx.doi.org/10.1080/03640210701802071},
    volume = {32},
    year = {2008}
}

@article{Kitzelmann2006Inductive,
    address = {Cambridge, MA, USA},
    author = {Kitzelmann, Emanuel and Schmid, Ute},
    citeulike-article-id = {2784157},
    citeulike-linkout-0 = {http://portal.acm.org/citation.cfm?id=1248562},
    issn = {1533-7928},
    journal = {J. Mach. Learn. Res.},
    keywords = {homepage, synthesis},
    pages = {429--454},
    posted-at = {2008-05-11 11:53:36},
    priority = {2},
    publisher = {MIT Press},
    title = {Inductive Synthesis of Functional Programs: An Explanation Based Generalization Approach},
    url = {http://portal.acm.org/citation.cfm?id=1248562},
    volume = {7},
    year = {2006}
}

@book{Winskel1993Formal,
    abstract = {{<I>The Formal Semantics of Programming Languages</i> provides the basic mathematical techniques necessary for those who are beginning a study of the semantics and logics of programming languages. These techniques will allow students to invent, formalize, and justify rules with which to reason about a variety of programming languages. Although the treatment is elementary, several of the topics covered are drawn from recent research, including the vital area of concurency. The book contains many exercises ranging from simple to miniprojects. <br /> <br /> Starting with basic set theory, structural operational semantics is introduced as a way to define the meaning of programming languages along with associated proof techniques. Denotational and axiomatic semantics are illustrated on a simple language of while-programs, and fall proofs are given of the equivalence of the operational and denotational semantics and soundness and relative completeness of the axiomatic semantics. A proof of Godel's incompleteness theorem, which emphasizes the impossibility of achieving a fully complete axiomatic semantics, is included. It is supported by an appendix providing an introduction to the theory of computability based on while-programs. <br /> <br /> Following a presentation of domain theory, the semantics and methods of proof for several functional languages are treated. The simplest language is that of recursion equations with both call-by-value and call-by-name evaluation. This work is extended to lan guages with higher and recursive types, including a treatment of the eager and lazy lambda-calculi. Throughout, the relationship between denotational and operational semantics is stressed, and the proofs of the correspondence between the operation and denotational semantics are provided. The treatment of recursive types - one of the more advanced parts of the book - relies on the use of information systems to represent domains. The book concludes with a chapter on parallel programming languages, accompanied by a discussion of methods for specifying and verifying nondeterministic and parallel programs.}},
    author = {Winskel, Glynn},
    citeulike-article-id = {278037},
    citeulike-linkout-0 = {http://www.amazon.ca/exec/obidos/redirect?tag=citeulike09-20&amp;path=ASIN/0262731037},
    citeulike-linkout-1 = {http://www.amazon.de/exec/obidos/redirect?tag=citeulike01-21&amp;path=ASIN/0262731037},
    citeulike-linkout-2 = {http://www.amazon.fr/exec/obidos/redirect?tag=citeulike06-21&amp;path=ASIN/0262731037},
    citeulike-linkout-3 = {http://www.amazon.jp/exec/obidos/ASIN/0262731037},
    citeulike-linkout-4 = {http://www.amazon.co.uk/exec/obidos/ASIN/0262731037/citeulike00-21},
    citeulike-linkout-5 = {http://www.amazon.com/exec/obidos/redirect?tag=citeulike07-20&path=ASIN/0262731037},
    citeulike-linkout-6 = {http://www.worldcat.org/isbn/0262731037},
    citeulike-linkout-7 = {http://books.google.com/books?vid=ISBN0262731037},
    citeulike-linkout-8 = {http://www.amazon.com/gp/search?keywords=0262731037&index=books&linkCode=qs},
    citeulike-linkout-9 = {http://www.librarything.com/isbn/0262731037},
    day = {05},
    howpublished = {Paperback},
    isbn = {0262731037},
    keywords = {denotational\_semantics, lazy, operational\_semantics, strict, types},
    month = {February},
    posted-at = {2006-04-24 11:40:36},
    priority = {0},
    publisher = {The MIT Press},
    title = {Formal Semantics of Programming Languages},
    url = {http://www.worldcat.org/isbn/0262731037},
    year = {1993}
}

@book{Pierce2002Types,
    abstract = {{A type system is a syntactic method for automatically checking the absence of certain erroneous behaviors by classifying program phrases according to the kinds of values they compute. The study of type systems--and of programming languages from a type-theoretic perspective-has important applications in software engineering, language design, high-performance compilers, and security.<br /> <br /> This text provides a comprehensive introduction both to type systems in computer science and to the basic theory of programming languages. The approach is pragmatic and operational; each new concept is motivated by programming examples and the more theoretical sections are driven by the needs of implementations. Each chapter is accompanied by numerous exercises and solutions, as well as a running implementation, available via the Web. Dependencies between chapters are explicitly identified, allowing readers to choose a variety of paths through the material.<br /> <br /> The core topics include the untyped lambda-calculus, simple type systems, type reconstruction, universal and existential polymorphism, subtyping, bounded quantification, recursive types, kinds, and type operators. Extended case studies develop a variety of approaches to modeling the features of object-oriented languages.}},
    author = {Pierce, Benjamin C.},
    citeulike-article-id = {105547},
    citeulike-linkout-0 = {http://www.amazon.ca/exec/obidos/redirect?tag=citeulike09-20&amp;path=ASIN/0262162091},
    citeulike-linkout-1 = {http://www.amazon.de/exec/obidos/redirect?tag=citeulike01-21&amp;path=ASIN/0262162091},
    citeulike-linkout-2 = {http://www.amazon.fr/exec/obidos/redirect?tag=citeulike06-21&amp;path=ASIN/0262162091},
    citeulike-linkout-3 = {http://www.amazon.jp/exec/obidos/ASIN/0262162091},
    citeulike-linkout-4 = {http://www.amazon.co.uk/exec/obidos/ASIN/0262162091/citeulike00-21},
    citeulike-linkout-5 = {http://www.amazon.com/exec/obidos/redirect?tag=citeulike07-20&path=ASIN/0262162091},
    citeulike-linkout-6 = {http://www.worldcat.org/isbn/0262162091},
    citeulike-linkout-7 = {http://books.google.com/books?vid=ISBN0262162091},
    citeulike-linkout-8 = {http://www.amazon.com/gp/search?keywords=0262162091&index=books&linkCode=qs},
    citeulike-linkout-9 = {http://www.librarything.com/isbn/0262162091},
    day = {01},
    edition = {1},
    howpublished = {Hardcover},
    isbn = {0262162091},
    keywords = {lambda\_calculus, types},
    month = {February},
    posted-at = {2010-04-01 19:05:40},
    priority = {0},
    publisher = {The MIT Press},
    title = {Types and Programming Languages},
    url = {http://www.worldcat.org/isbn/0262162091},
    year = {2002}
}
